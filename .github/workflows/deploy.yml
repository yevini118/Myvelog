# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Deploy to EC2 with DOCKER
on:
  push:
    branches: [ "main" ]
    
permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Make private properties file
    - uses: actions/checkout@v2
    - run: 
        touch ./src/main/resources/application-private.properties
        echo "${{ secrets.PRIVATE_PROPERTIES }}" > ./src/main/resources/application-private.properties

    - name: Make selenium properties file
    - uses: actions/checkout@v2
    - run:
        touch ./src/main/resources/application-selenium.properties
        echo "${{ secrets.SELENIUM_PROPERTIES }}" > ./src/main/resources/application-selenium.properties
        
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build

    - name: Docker Login
      uses: docker/login-action@v3.0.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      run:
        docker build -t ${{ secrets.DOCKER_REPO }} .
        docker push ${{ secrets.DOCKER_REPO }}
    
    - name: Deploy Docker to AWS (EC2)
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.AWS_HOST }}
        username: ubuntu
        key: ${{ secrets.AWS_KEY }}
        script: |
          docker stop $(docker ps -a -q) 
          docker rm $(docker ps -a -q) 
          sudo docker image rm ${{ secrets.DOCKER_REPO }}
          sudo docker pull ${{ secrets.DOCKER_REPO }}
          sudo docker run -d -p 80:8080 ${{ secrets.DOCKER_REPO }}
      
        
